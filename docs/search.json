[{"path":"https://brsantos.github.io/overcoverage/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 overcoverage authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://brsantos.github.io/overcoverage/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bruno Santos. Maintainer.","code":""},{"path":"https://brsantos.github.io/overcoverage/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Santos B (2023). overcoverage: Package (Title Case). R package version 0.1.0, https://brsantos.github.io/overcoverage/.","code":"@Manual{,   title = {overcoverage: What the Package Does (Title Case)},   author = {Bruno Santos},   year = {2023},   note = {R package version 0.1.0},   url = {https://brsantos.github.io/overcoverage/}, }"},{"path":"https://brsantos.github.io/overcoverage/index.html","id":"overcoverage-","dir":"","previous_headings":"","what":"What the Package Does (Title Case)","title":"What the Package Does (Title Case)","text":"package estimate overcoverage register based data considering Multiple System Estimation (MSE) models, based package conting. discussion method available paper: Mussino, E., Santos, B., Monti, . et al. Multiple systems estimation studying -coverage heterogeneity population registers. Quality & Quantity (2023). https://doi.org/10.1007/s11135-023-01757-x","code":""},{"path":"https://brsantos.github.io/overcoverage/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"What the Package Does (Title Case)","text":"using package, need install archived package conting. package archived, need install different way. Using package devtools, can use following code installing conting, can install package, also using devtools following lines","code":"devtools::install_version(\"conting\",                           version = \"1.7\") devtools::install_github(\"brsantos/overcoverage\")"},{"path":"https://brsantos.github.io/overcoverage/index.html","id":"creating-a-population","dir":"","previous_headings":"","what":"Creating a population","title":"What the Package Does (Title Case)","text":"type data sensitive publicly available, create functions able recreate similar scenarios showcase use package. First, can create general database, similar purpose Register Total Population (RTB) Sweden. assume someone enter country, definitely dataset. use function create_population. can define many people enter country year, purpose comparison different countries, instance. can create dummy variables, represent information sex (male female), employed (yes ), among others. can create numerical variables represent income, age, time country, etc. lastly, can create factor variables three levels. represent age groups, income groups type grouping. case interest another type variable, adaptation function easy implement. binary variables able receive proportion successful cases, instance. can easily create binary variable equal proportion population, sex, create variable proportion people employed, values higher 0.5 example. following example, show create population 200,000 individuals. create 2 binary variables, names sex higher_educated. One categorical variable named age_groups numerical variable called scaled_income. default, categories factor variable sampled probabilities 0.5, 0.3 0.2, can changed. can make plots look distribution across population. variable independent , seems bars height, slightly variations one bars.","code":"set.seed(42)  library(overcoverage)  main_pop <- create_population(    size = 2e5,    n_bin = 2,     n_cont_var = 1,    n_cat_var = 1,    prob_bin = c(0.5, 0.7),     names_bin = c(\"sex\", \"higher_educated\"),     names_cont = \"scaled_income\",     names_cat_var = \"age_groups\") library(ggplot2) library(patchwork)  g <- ggplot(main_pop) + theme_minimal() g1 <- g + geom_bar(aes(fill = factor(sex),                         x = factor(higher_educated)),                     position = \"fill\") +    labs(x = \"higher_educated\") +    scale_fill_viridis_d(name = \"sex\") g2 <- g + geom_bar(aes(fill = factor(higher_educated),                         x = factor(sex)),                     position = \"fill\") +   labs(x = \"sex\") +    scale_fill_viridis_d(name = \"higher_educated\") g3 <- g + geom_bar(aes(fill = factor(age_groups),                         x = factor(higher_educated)),                     position = \"fill\") +   labs(x = \"higher_educated\") +    scale_fill_viridis_d(name = \"age_groups\") g4 <- g + geom_histogram(aes(x = scaled_income),                           fill = \"royalblue\", color = \"grey75\")  g1 + g2 + g3 + g4"},{"path":"https://brsantos.github.io/overcoverage/index.html","id":"presence-in-the-country","dir":"","previous_headings":"","what":"Presence in the country","title":"What the Package Does (Title Case)","text":"Given fixed population, can create matrix information one individuals present country. can assume either arrived first year arrived throughout number years. second option, can select whether arrived constantly . control probability individual leaving country given linear predictor, used within logistic regression model. instance, following example can say probability leaving country, ϕ, function age groups following equation $$\\log \\begin{pmatrix}\\frac{\\phi_i}{1 - \\phi_i} \\end{pmatrix} = \\beta_0 + \\beta_1 X_B + \\beta_2 X_C,$$ Xi indicator variable equal 1, age_groups equal 0 otherwise. following example, set β0 = 2, β1 =  − 0.5 β2 =  − 1 set arrivals happen constantly 4 years. purpose people least one year, arrivals last year. ’s reason 50,000 arrivals first year every year year 4 none year 5. can see effect age groups probability staying country looking distribution age groups years. distribution changes years, distribution sex change comparison.","code":"presences <- create_presences(main_pop,    formula_phi = ~ age_groups,    coef_values = c(2.5, -0.5, -1),    years = 5, varying_arrival = TRUE)  # checking how many presences each year colSums(presences) #> [1]  50000  94522 134216 169668 151283 library(tidyr) library(dplyr)  info_presence <- data.frame(   id = main_pop$id,    age_groups = main_pop$age_groups,    sex = main_pop$sex,   presences) %>%    pivot_longer(cols = starts_with(\"X\"),                 names_to = \"year\",                 names_prefix = \"X\",                 values_to = \"presence\")  p1 <- ggplot(filter(info_presence, presence == 1)) +   theme_minimal() +    geom_bar(aes(x = year, fill = age_groups), position = \"fill\") +    scale_fill_viridis_d()  p2 <- ggplot(filter(info_presence, presence == 1)) +   theme_minimal() +    geom_bar(aes(x = year, fill = factor(sex)), position = \"fill\") +    scale_fill_viridis_d(name = \"sex\")  p1 + p2"},{"path":"https://brsantos.github.io/overcoverage/index.html","id":"creating-listsregisters","dir":"","previous_headings":"","what":"Creating lists/registers","title":"What the Package Does (Title Case)","text":"model based observation individuals different lists registers. instance, register people employed register marriages. can simulate registers similarly probability leaving country. probability appearing given register can depend different variables available main data set. Let’s create three different lists, probability appearing one lists depend separately three different variables created: sex, higher_educated scaled_income. can done following manner. coefficient values used, can calculate probability appearing one lists. l1, can say people sex == 0 probability appearing list equal 0.818, people sex == 1 probability equal 0.668. can calculated using inverse logit function $$\\frac{\\exp(1.5)}{1 + \\exp(1.5)} = 0.818 \\quad  \\mbox{ } \\quad \\frac{\\exp(1.5 - 0.8)}{1 + \\exp(1.5 - 0.8)} = 0.668$$ can observe quantities using similar plots variation presence years.  plots, considering list l1, looking probability selected given variable higher_educated, see approximately probability selected l1, roughly average 0.818 0.668, 0.743","code":"l1 <- create_list_presences(   main_pop,   presences,   formula_prob = ~ sex,    coef_values = c(1.5, -0.8))  l2 <- create_list_presences(   main_pop,   presences,   formula_prob = ~ higher_educated,    coef_values = c(0.5, -0.2))  l3 <- create_list_presences(   main_pop,   presences,   formula_prob = ~ scaled_income,    coef_values = c(-0.5, 1)) info_l1 <- data.frame(   id = main_pop$id,   higher_educated = main_pop$higher_educated,   sex = main_pop$sex,   l1) %>%    pivot_longer(cols = starts_with(\"X\"),                 names_to = \"year\",                 names_prefix = \"X\",                 values_to = \"l1\")  # checking if the other of the ids is the same, so we merge the same information all.equal(info_presence$id, info_l1$id) #> [1] TRUE all.equal(info_presence$year, info_l1$year) #> [1] TRUE  # if this was not the case, then a different approach would be necessary to  # join the bases   # combining the columns since the ids are all the same all_info <- info_presence %>%    mutate(higher_educated = info_l1$higher_educated,           sex = info_l1$sex,           l1 = info_l1$l1)   l1_sex0 <- ggplot(filter(all_info, sex == 0, presence == 1)) +   theme_minimal() +    geom_bar(aes(x = year, fill = factor(l1)), position = \"fill\") +    scale_fill_viridis_d(name = \"l1\") +    labs(title = \"sex == 0\")  l1_sex1 <- ggplot(filter(all_info, sex == 1, presence == 1)) +   theme_minimal() +    geom_bar(aes(x = year, fill = factor(l1)), position = \"fill\") +    scale_fill_viridis_d(name = \"l1\") +    labs(title = \"sex == 1\")  l1_sex0 + l1_sex1 l1_he0 <- ggplot(filter(all_info, higher_educated == 0, presence == 1)) +   theme_minimal() +    geom_bar(aes(x = year, fill = factor(l1)), position = \"fill\") +    scale_fill_viridis_d(name = \"l1\") +    labs(title = \"higher_educated == 0\")  l1_he1 <- ggplot(filter(all_info, higher_educated == 1, presence == 1)) +   theme_minimal() +    geom_bar(aes(x = year, fill = factor(l1)), position = \"fill\") +    scale_fill_viridis_d(name = \"l1\") +    labs(title = \"higher_educated == 1\")  l1_he0 + l1_he1"},{"path":"https://brsantos.github.io/overcoverage/index.html","id":"modelling-overcoverage","dir":"","previous_headings":"","what":"Modelling overcoverage","title":"What the Package Does (Title Case)","text":"Considering observation different lists information people present country given year, can compare model can help estimation -coverage. instance, can compare year 5 many people detected three lists many present country. difference around 10 thousand individuals seen lists given year. can use model estimate quantity reach new value number individuals present country. considered high probability leaving country, 8% 20% different age groups, high number overcoverage example. real value 1 - n_present / 200000, equal 0.243585. estimate considering register trace approach, .e., individuals seen list considered -covered, defined 1 - n_observed / 200000, equal 0.291065. order consider approach, need build contingency table possible combinations variables available us. consider year 5 compare estimate real value. First combine information lists 2 3 longer format combine information one data set, order create contingency table easily. using contingency tables, need factorise scaled_income, numerical variable. Considering variable created standard normal distribution, can consider quantiles normal distribution create three levels . Now can create contingency table considering possible combinations variables registers, filtering just data year 5.","code":"# People observed at least once in the different lists in year 5. n_observed <- sum((l1[, 5] + l2[, 5] + l3[, 5]) > 0)   # People present in the country in year 5. n_present <- sum(presences[, 5])  # Difference n_present - n_observed  #> [1] 9496 info_l2 <- data.frame(   id = main_pop$id,   scaled_income = main_pop$scaled_income,   l2) %>%    pivot_longer(cols = starts_with(\"X\"),                 names_to = \"year\",                 names_prefix = \"X\",                 values_to = \"l2\")  info_l3 <- data.frame(   id = main_pop$id,   l3) %>%    pivot_longer(cols = starts_with(\"X\"),                 names_to = \"year\",                 names_prefix = \"X\",                 values_to = \"l3\")  final_dataset <- all_info %>%    mutate(scaled_income = info_l2$scaled_income,           l2 = info_l2$l2,           l3 = info_l3$l3) final_dataset <- final_dataset %>%    mutate(     scaled_income_fct = case_when(       scaled_income < qnorm(1/3) ~ \"income_lv1\",        scaled_income < qnorm(2/3) ~ \"income_lv2\",        .default = \"income_lv3\"     )   )  table(final_dataset$scaled_income_fct) %>% prop.table() #>  #> income_lv1 income_lv2 income_lv3  #>    0.33367    0.33277    0.33356 cont_table <- filter(final_dataset, year == 5) %>%    group_by(     sex, age_groups, higher_educated, scaled_income_fct,      l1, l2, l3) %>%    summarise(qty = n())"},{"path":"https://brsantos.github.io/overcoverage/reference/create_list_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of list of people that deregister from the population. — create_list_out","title":"Creation of list of people that deregister from the population. — create_list_out","text":"Given population list presences, `create_list_out()` creates   list individuals deregister.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_list_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of list of people that deregister from the population. — create_list_out","text":"","code":"create_list_out(pop, presences, departures, formula_prob, coef_values)"},{"path":"https://brsantos.github.io/overcoverage/reference/create_list_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of list of people that deregister from the population. — create_list_out","text":"pop baseline population one select individuals arrive leave number years. presences matrix presences individuals population number years. departures vector departure times individuals population number years. formula_prob linear predictor formula calculate probability deregistering. coef_values values coefficient used linear predictor defined `formula_prob`. coefficients used considering logit link function.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_list_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of list of people that deregister from the population. — create_list_out","text":"matrix information deregistering (1) non   non deregistering (0) individual population considering   number years observation.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_list_presences.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating observations of lists in a population — create_list_presences","title":"Creating observations of lists in a population — create_list_presences","text":"function `create_list_presences` creates matrix presences based  population individuals matrix presences.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_list_presences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating observations of lists in a population — create_list_presences","text":"","code":"create_list_presences(pop, presences, formula_prob, coef_values)"},{"path":"https://brsantos.github.io/overcoverage/reference/create_list_presences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating observations of lists in a population — create_list_presences","text":"pop baseline population one select individuals arrive leave number years. presences matrix presences individuals population number years. formula_prob linear predictor formula calculate probability appearing list. coef_values values coefficient used linear predictor defined `formula_prob`. coefficients used considering logit link function.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_list_presences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating observations of lists in a population — create_list_presences","text":"matrix information detection (1) non detection   (0) individual population considering number years   observation.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_list_presences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating observations of lists in a population — create_list_presences","text":"","code":"set.seed(111)  # creating main population main_pop <- create_population(   size = 500,   n_cat_var = 3,   prob_bin = c(0.5))  # creating matrix of presences. presences <- create_presences(main_pop,                               formula_phi = ~ bin1,                               coef_values = c(2, -1),                               varying_arrival = TRUE,                               const_rate_arrival = FALSE,                               years = 3)  # creating list1 observation as a function of bin1 list1 <- create_list_presences(main_pop, presences,                                ~ bin1,                                c(1.5, -0.5))  # checking the conditional distribution of list1 given bin1 prop.table(table(main_pop$bin1, list1[,1]), 1) #>     #>             0         1 #>   0 0.6173285 0.3826715 #>   1 0.7040359 0.2959641  # creating list1 observation as a function of cat1, that needs two # coefficients, because cat1 has 3 categories. list2 <- create_list_presences(main_pop, presences,                                ~ cat1,                                c(-0.5, -0.5, 1.0))  # checking the conditional distribution of list2 given bin1 prop.table(table(main_pop$bin1, list2[, 1]), 1) #>     #>             0         1 #>   0 0.7978339 0.2021661 #>   1 0.8026906 0.1973094  # checking the conditional distribution of list2 given cat1 prop.table(table(main_pop$cat1, list2[, 1]), 1) #>     #>             0         1 #>   A 0.8117155 0.1882845 #>   B 0.8600000 0.1400000 #>   C 0.6936937 0.3063063"},{"path":"https://brsantos.github.io/overcoverage/reference/create_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a simulated population to test models for overcoverage. — create_population","title":"Create a simulated population to test models for overcoverage. — create_population","text":"`create_population()` creates simulated population defined number   number binary, continuous categorical variables.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a simulated population to test models for overcoverage. — create_population","text":"","code":"create_population(   size,   n_bin_var = 1,   n_cont_var = 1,   n_cat_var = 1,   prob_bin,   prob_cat = c(0.5, 0.3, 0.2),   names_bin_var = NULL,   names_cont = NULL,   names_cat_var = NULL )"},{"path":"https://brsantos.github.io/overcoverage/reference/create_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a simulated population to test models for overcoverage. — create_population","text":"size Size population created. n_bin_var Number binary variables created population. n_cont_var Number continuous variables created population. Continuous variables generated according Normal distribution. n_cat_var Number categorical variables created population. Categorical variables always created three categories: , B C. prob_bin Vector probabilities binary variable created. case length `n_bin_var` first value vector repeated `n_bin_var` times. prob_cat Vector probabilities categorical variables created. must length 3 default values 0.5, 0.3 0.2. names_bin_var Vector names binary variables. names_cont Vector names continuous variables. names_cat_var Vector names categorical variables.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a simulated population to test models for overcoverage. — create_population","text":"`data.frame` population respective  variables.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a simulated population to test models for overcoverage. — create_population","text":"","code":"# basic usage of create_population function main_pop <- create_population(   size = 1e6,   n_cont_var = 1,   n_cat_var = 3,   prob_bin = c(0.5))"},{"path":"https://brsantos.github.io/overcoverage/reference/create_presences.html","id":null,"dir":"Reference","previous_headings":"","what":"Create matrix of presences and absences. — create_presences","title":"Create matrix of presences and absences. — create_presences","text":"Based given population, `create_presences()` creates matrix   presences absences based probability function remain   country.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_presences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create matrix of presences and absences. — create_presences","text":"","code":"create_presences(   pop,   varying_arrival = FALSE,   const_rate_arrival = TRUE,   formula_phi,   coef_values,   years = 2 )"},{"path":"https://brsantos.github.io/overcoverage/reference/create_presences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create matrix of presences and absences. — create_presences","text":"pop baseline population one select individuals arrive leave number years. varying_arrival logical parameter controls individuals arrive first year . Default FALSE. const_rate_arrival case individuals arriving different years, `TRUE` individuals arrive constant rate year. `FALSE` arrive randomly different years. formula_phi linear predictor formula calculate probability leaving country. coef_values values coefficient used linear predictor defined `formula_phi`. coefficients used considering logit link function. years Number years define matrix absences presences.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_presences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create matrix of presences and absences. — create_presences","text":"matrix information presence (1) absence (0)   individual population considering number years   observation.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/create_presences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create matrix of presences and absences. — create_presences","text":"","code":"main_pop <- create_population( size = 500, n_cat_var = 3, prob_bin = c(0.5))  # example with all individuals arriving in the first year. presences <- create_presences(main_pop,   formula_phi = ~ bin1,   coef_values = c(2, -1),   years = 3) colSums(presences) #> [1] 500 399 329  # example with constant rate of arrival of individuals in each year. presences <- create_presences(main_pop,   formula_phi = ~ bin1,   coef_values = c(2, -1),   varying_arrival = TRUE,   years = 3) colSums(presences) #> [1] 250 454 355  # example with varying rate of arrival of individuals in each year. presences <- create_presences(main_pop,   formula_phi = ~ bin1,   coef_values = c(2, -1),   varying_arrival = TRUE,   const_rate_arrival = FALSE,   years = 3) colSums(presences) #> [1] 224 456 369"},{"path":"https://brsantos.github.io/overcoverage/reference/oc_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model to estimate over-coverage on population — oc_model","title":"Model to estimate over-coverage on population — oc_model","text":"`oc_model()` function able get estimate -coverage   population based register data log-linear models.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/oc_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model to estimate over-coverage on population — oc_model","text":"","code":"oc_model(   model_formula,   freq_table,   censored,   nsample = 2000,   null.move.prob = 1,   n.burnin = 1000,   thin = 1,   prob_level = 0.95,   ... )"},{"path":"https://brsantos.github.io/overcoverage/reference/oc_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model to estimate over-coverage on population — oc_model","text":"model_formula Model formula used log-linear model. freq_table Frequency table observational data. censored Indexes individuals observed registers. nsample Number posterior draws MCMC estimation process. null.move.prob Parameter control model selection algorithm. See `conting::bict()` information. n.burnin Number burnin samples discarded MCMC algorithm. thin Thinning parameter MCMC algorithm. prob_level Probability level used calculating credible interval overcoverage level. ... Additional arguments passed `conting::bict()` function, slightly changed function properly latest versions R.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/oc_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model to estimate over-coverage on population — oc_model","text":"list overcoverage estimates summaries number  false positives based estimates model. object model  also returned.","code":""},{"path":"https://brsantos.github.io/overcoverage/reference/oc_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model to estimate over-coverage on population — oc_model","text":"","code":"if (FALSE) model_oc <- oc_model(  qty ~ bin1 * list1 + cat1 * list2,  freq_table,  cens_ind)"}]
